**When would you want to use a remote repository rather than keeping all your
work local?**
Using a remote repository means your work doesn't disappear if you lose your
computer, your hard drive gets corrupted, or something similarly catastrophic
happens.

**Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?**
With a public repository, it would be kind of embarrassing if you were screwing
around in the code (or writing lazy code) and had your changes committed to the
remote repo. Someone might stumble across them when you don't want them to.

**Describe the differences between forks, clones, and branches. When would you
use one instead of another?**
Forks allow you to copy a remote repo but maintain a reference back to the
original. They're useful when you want to copy a repo someone else has created
but want to make sure you give them credit for the original (because they're
awesome and you like their work), and also when you don't have permission to
change an existing repo but want to add to it. Clones are useful for copying
existing repos that aren't on github. They just let you copy a repo to your
local machine. For example, you could use clone to copy a remote repo to your
local machine. Branches are a way to add a major change to an existing repo. For
example, if you're experimenting with a feature and aren't sure you'll want to
include it in the final project, you might make a branch.

**What is the benefit of having a copy of the last known state of the remote
stored locally?**
Having a copy of the last known state of the remote stored locally makes it
easier to work offline. I have an hour-long commute on public transit to my
day job, so if I'm working on a project, especially a collaborative one, I can
quickly get a copy of the last known state of my project before I head out the
door to hop on the bus, then I can review changes to the codebase and avoid
duplicating work before I start working on my own.

**How would you collaborate without using Git or GitHub? What would be easier,
and what would be harder?**
Without Git and GitHub, I'd collaborate by storing my files on a shared server
like Google Drive and sharing that space with colleagues. Managing changes to
the codebase would be a challenge - we'd either need to:
1. let the other people know when we're working on a specific file, so they
don't also work on it at the same time, or
2. use Google Docs as a text editor, which isn't great because it doesn't have
useful tools like colors and auto-complete. Maybe there's an add-on for that
though?
We'd also need to manually keep track of changes and comment on new additions.
One thing that would be notably easier would be getting others onto the
platform. Git and github are a bit complicated, and the names of concepts and
buttons are a bit heavy on programmer-lingo. It's not the most friendly system.

**When would you want to make changes in a separate branch rather than directly
in master? What benefits does each approach have?**
It's helpful to work in a separate branch if you're making a large addition or
change that your collaborators may not want to integrate into the overall
project or something experimental. It's tedious, but for a project that may
have many commits, it's actually not that much of an increase in time/labor and
it helps make sure your master branch is always in working order. It would be
easier to work directly in master if you're making a small bug fix or fixing
a typo.
