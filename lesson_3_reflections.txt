**When would you want to use a remote repository rather than keeping all your
work local?**
Using a remote repository means your work doesn't disappear if you lose your
computer, your hard drive gets corrupted, or something similarly catastrophic
happens.

**Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?**
With a public repository, it would be kind of embarrassing if you were screwing
around in the code (or writing lazy code) and had your changes committed to the
remote repo. Someone might stumble across them when you don't want them to.

**Describe the differences between forks, clones, and branches. When would you
use one instead of another?**
Forks allow you to copy a remote repo but maintain a reference back to the
original. They're useful when you want to copy a repo someone else has created
but want to make sure you give them credit for the original (because they're
awesome and you like their work), and also when you don't have permission to
change an existing repo but want to add to it. Clones are useful for copying
existing repos that aren't on github. They just let you copy a repo to your
local machine. For example, you could use clone to copy a remote repo to your
local machine. Branches are a way to add a major change to an existing repo. For
example, if you're experimenting with a feature and aren't sure you'll want to
include it in the final project, you might make a branch.

**What is the benefit of having a copy of the last known state of the remote
stored locally?**
Having a copy of the last known state of the remote stored locally makes it
easier to work offline. I have an hour-long commute on public transit to my
day job, so if I'm working on a project, especially a collaborative one, I can
quickly get a copy of the last known state of my project before I head out the
door to hop on the bus, then I can review changes to the codebase and avoid
duplicating work before I start working on my own.
